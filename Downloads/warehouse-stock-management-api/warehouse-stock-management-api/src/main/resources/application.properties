spring.application.name=warehouse-stock-management-api
# Sunucu Portu
# Projemizin çal??aca?? web portu. Genellikle 8080'dir.
server.port=8080

# PostgreSQL Veritaban? Ba?lant? Ayarlar?
# -----------------------------------------------
# Projemize veritaban?n?n tam adresini söylüyoruz.
# jdbc:postgresql:// -> Bu bir PostgreSQL ba?lant?s?d?r.
# localhost:5432 -> Veritaban? bu bilgisayarda (localhost) ve 5432 portunda çal???yor.
# /wms_db -> Bu sunucunun içindeki "wms_db" adl? veritaban?na ba?lan.
spring.datasource.url=jdbc:postgresql://localhost:5432/wms_db

# PostgreSQL'i kurarken belirledi?in kullan?c? ad?n. Genellikle 'postgres' olur.
# KEND? KULLANICI ADINLA DE???T?R!
spring.datasource.username=postgres 

# PostgreSQL'i kurarken belirledi?in ?ifren.
# KEND? ??FRENLE DE???T?R!
spring.datasource.password=689202

# JPA / Hibernate Ayarlar?
# ---------------------------------
# Bu en önemli ayarlardan biri. "update" de?eri sayesinde,
# sen Java'da bir @Entity s?n?f? olu?turdu?unda Hibernate gidip
# veritaban?nda ona kar??l?k gelen tabloyu otomatik olarak olu?turur veya günceller.
spring.jpa.hibernate.ddl-auto=update

# Bu ayar, projenin veritaban?nda çal??t?rd??? tüm SQL komutlar?n?
# konsolda görmeni sa?lar. Hata ay?klarken çok faydal?d?r.
spring.jpa.show-sql=true

# Hibernate'e PostgreSQL'e özel komutlar? kullanmas?n? söyleriz.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
